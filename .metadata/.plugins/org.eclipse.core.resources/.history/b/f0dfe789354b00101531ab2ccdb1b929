package medPro.main;

import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.List;
import java.util.Scanner;

import medPro.DAO.*;
import medPro.model.*;

public class Main {
	public static void main(String[] args) {

		AtendenteDAO atendenteDAO = new AtendenteDAO();
		Atendente atendente = null;
		MedicoDAO medicoDAO = new MedicoDAO();
		Medico medico = null;
		PacienteDAO pacienteDAO = new PacienteDAO();
		Paciente paciente = null;
		MedicamentoDAO medicamentoDAO = new MedicamentoDAO();
		Medicamento medicamento = null;
		EspecialidadeDAO especialidadeDAO = new EspecialidadeDAO();
		Especialidade especialidade = null;
		ConsultaDAO consultaDAO = new ConsultaDAO();
		Consulta consulta = null;
		ReceitaDAO receitaDAO = new ReceitaDAO();
		Receita receita = null;
		Sexo novoSexo = null;
		Scanner scanner = new Scanner(System.in);
		int opcao = -1;

		try {
			do {
				try {
					System.out.println("\n===== MENU PRINCIPAL =====");
					System.out.println("1. Cadastrar atendente");
					System.out.println("2. Visualizar dados do atendente");
					System.out.println("3. Atualizar dados do atendente");
					System.out.println("4. Excluir atendente");
					System.out.println("5. Cadastrar m√©dico");
					System.out.println("6. Visualizar dados do m√©dico");
					System.out.println("7. Atualizar dados do m√©dico");
					System.out.println("8. Excluir m√©dico");
					System.out.println("9. Cadastrar paciente");
					System.out.println("10. Visualizar dados do paciente");
					System.out.println("11. Atualizar dados do paciente");
					System.out.println("12. Excluir paciente");
					System.out.println("13. Cadastrar medicamento");
					System.out.println("14. Visualizar dados do medicamento");
					System.out.println("15. Atualizar dados do medicamento");
					System.out.println("16. Excluir medicamento");
					System.out.println("17. Cadastrar especialidade");
					System.out.println("18. Visualizar todas as especialidades");
					System.out.println("19. Atualizar nome de especialidade");
					System.out.println("20. Excluir especialidade");
					System.out.println("21. Agendar consulta");
					System.out.println("22. Listar todas as consultas");
					System.out.println("23. Finalizar consulta e gerar receita");
					System.out.println("24. Ver total de consultas por m√©dico");
					System.out.println("25. Gerar relat√≥rio de receita");
					System.out.println("0. Sair");
					System.out.print("Escolha uma op√ß√£o: ");

					opcao = scanner.nextInt();
					scanner.nextLine(); // Consome a nova linha

					switch (opcao) {

					case 1:
						System.out.println("--- Cadastro de Atendente ---");
						System.out.print("Nome do atendente: ");
						String nome_Atendente = scanner.nextLine();
						int idade_Atendente = 0;
						while (true) {
							try {
								System.out.print("Idade do atendente: ");
								idade_Atendente = scanner.nextInt();
								scanner.nextLine();
								break;
							} catch (InputMismatchException e) {
								System.out.println("‚ùå Idade inv√°lida. Por favor, insira um n√∫mero.");
								scanner.nextLine();
							}
						}
						Sexo sexo_Atendente = null;
						do {
							System.out.print("Sexo do atendente (M/F): ");
							String sexoA = scanner.nextLine().toUpperCase();
							if (sexoA.equals("M")) sexo_Atendente = Sexo.M;
							else if (sexoA.equals("F")) sexo_Atendente = Sexo.F;
							else System.out.println("‚ùå Sexo inv√°lido, tente novamente.");
						} while (sexo_Atendente == null);
						System.out.print("Telefone do atendente: ");
						String telefone_Atendente = scanner.nextLine();
						System.out.print("Email do atendente: ");
						String email_Atendente = scanner.nextLine();
						atendente = new Atendente(nome_Atendente, idade_Atendente, sexo_Atendente, telefone_Atendente, email_Atendente);
						atendenteDAO.salvar(atendente);
						System.out.println("‚úÖ Atendente cadastrado com sucesso!");
						break;

					case 2:
						System.out.println("--- Visualizar Atendente ---");
						System.out.print("Insira a matr√≠cula do atendente: ");
						int matriculaSelect = scanner.nextInt();
						scanner.nextLine();
						atendenteDAO.buscarPorMatricula(matriculaSelect);
						break;

					case 3:
						System.out.println("--- Atualizar Atendente ---");
						System.out.print("Insira a matr√≠cula do atendente a ser atualizado: ");
						int matriculaUpdate = scanner.nextInt();
						scanner.nextLine();
						Atendente atendenteUpdate = atendenteDAO.buscarPorMatricula(matriculaUpdate);
						if (atendenteUpdate == null) {
							System.out.println("‚ùå Atendente n√£o encontrado.");
							break;
						}
						System.out.print("Novo nome (" + atendenteUpdate.getNomeAtendente() + "): ");
						atendenteUpdate.setNomeAtendete(scanner.nextLine());
						System.out.print("Nova idade (" + atendenteUpdate.getIdadeAtendente() + "): ");
						atendenteUpdate.setIdadeAtendente(scanner.nextInt());
						scanner.nextLine();
						do {
							System.out.print("Novo sexo (M/F): ");
							String sexoUpdate = scanner.nextLine().toUpperCase();
							if (sexoUpdate.equals("M")) novoSexo = Sexo.M;
							else if (sexoUpdate.equals("F")) novoSexo = Sexo.F;
							else {
								System.out.println("‚ùå Sexo inv√°lido.");
								novoSexo = null;
							}
						} while (novoSexo == null);
						atendenteUpdate.setSexoAtendente(novoSexo);
						System.out.print("Novo telefone (" + atendenteUpdate.getTelefoneAtendente() + "): ");
						atendenteUpdate.setTelefoneAtendente(scanner.nextLine());
						System.out.print("Novo email (" + atendenteUpdate.getEmailAtendente() + "): ");
						atendenteUpdate.setEmailAtendente(scanner.nextLine());
						atendenteDAO.atualizar(atendenteUpdate);
						System.out.println("‚úÖ Atendente atualizado com sucesso!");
						break;
						
					case 4:
						System.out.println("--- Excluir Atendente ---");
						System.out.print("Insira a matr√≠cula do atendente a ser exclu√≠do: ");
						int matriculaDelete = scanner.nextInt();
						scanner.nextLine();
						atendenteDAO.deletar(matriculaDelete);
						break;
					
					// ... Outros cases de M√©dico, Paciente, etc. seguindo o mesmo padr√£o ...

					case 21:
						System.out.println("--- Agendar Consulta ---");
						DateTimeFormatter formatoData = DateTimeFormatter.ofPattern("dd/MM/yyyy");
						LocalDate data = null;
						while (data == null) {
							System.out.print("Data da Consulta (dd/mm/yyyy): ");
							String dataConsultaInput = scanner.nextLine();
							try {
								data = LocalDate.parse(dataConsultaInput, formatoData);
							} catch (DateTimeParseException e) {
								System.out.println("‚ùå Formato de data inv√°lido! Use dd/mm/yyyy.");
							}
						}
						LocalTime horaConsulta = null;
						while (horaConsulta == null) {
							System.out.print("Hora da Consulta (HH:mm): ");
							try {
								horaConsulta = LocalTime.parse(scanner.nextLine());
							} catch (DateTimeParseException e) {
								System.out.println("‚ùå Formato de hora inv√°lido! Use HH:mm.");
							}
						}
						System.out.println("Escolha o atendente:");
						atendenteDAO.listarTodos();
						System.out.print("Digite a matr√≠cula do atendente: ");
						int idAtendenteConsulta = scanner.nextInt();
						scanner.nextLine();
						System.out.println("Escolha o m√©dico:");
						medicoDAO.listarTodos();
						System.out.print("Digite o CRM do m√©dico: ");
						String crmMedicoConsulta = scanner.nextLine();
						System.out.println("Escolha o paciente:");
						pacienteDAO.listarTodos();
						System.out.print("Digite o CPF do paciente: ");
						String cpfPacienteConsulta = scanner.nextLine();
						consulta = new Consulta(data.format(formatoData), horaConsulta, idAtendenteConsulta, crmMedicoConsulta, cpfPacienteConsulta);
						consultaDAO.inserirConsultaViaProcedure(consulta);
						System.out.println("‚úÖ Consulta agendada com sucesso!");
						break;
					
					case 22:
						System.out.println("--- Lista de Todas as Consultas ---");
						consultaDAO.listarConsultasCompletas();
						break;
						
					case 23:
						System.out.println("--- Finalizar Consulta e Gerar Receita ---");
						int idConsulta = 0;
						while (true) {
							try {
								System.out.print("Digite o ID da consulta que deseja finalizar: ");
								idConsulta = scanner.nextInt();
								scanner.nextLine();
								break;
							} catch (InputMismatchException e) {
								System.out.println("‚ùå ID inv√°lido. Por favor, insira um n√∫mero inteiro.");
								scanner.nextLine();
							}
						}
						System.out.print("Descri√ß√£o do tratamento (receita): ");
						String descricaoReceita = scanner.nextLine();
						List<Medicamento> medicamentosDisponiveis = medicamentoDAO.listarTodos();
						List<Medicamento> medicamentosSelecionados = new ArrayList<>();
						if (medicamentosDisponiveis.isEmpty()) {
							System.out.println("‚ö†Ô∏è Nenhum medicamento cadastrado no sistema.");
						} else {
							System.out.println("üìã Lista de Medicamentos dispon√≠veis:");
							medicamentosDisponiveis.forEach(m -> System.out.println(m.getIdMedicamento() + " - " + m.getNomeMedicamento()));
							String continuar;
							do {
								int idMedicamento = 0;
								while (true) {
									try {
										System.out.print("Digite o ID do medicamento para adicionar √† receita: ");
										idMedicamento = scanner.nextInt();
										scanner.nextLine();
										break;
									} catch (InputMismatchException e) {
										System.out.println("‚ùå ID inv√°lido. Por favor, insira um n√∫mero inteiro.");
										scanner.nextLine();
									}
								}
								Medicamento m = medicamentoDAO.buscarPorId(idMedicamento);
								if (m != null) {
									medicamentosSelecionados.add(m);
									System.out.println("‚úÖ Medicamento adicionado.");
								} else {
									System.out.println("‚ùå Medicamento n√£o encontrado.");
								}
								while (true) {
									System.out.print("Deseja adicionar outro medicamento? (S/N): ");
									continuar = scanner.nextLine().toUpperCase();
									if (continuar.equals("S") || continuar.equals("N")) break;
									else System.out.println("‚ùå Op√ß√£o inv√°lida. Digite 'S' para Sim ou 'N' para N√£o.");
								}
							} while (continuar.equals("S"));
						}
						receita = new Receita(0, descricaoReceita, medicamentosSelecionados, idConsulta);
						receitaDAO.salvar(receita);
						System.out.println("‚úÖ Receita salva com sucesso!");
						break;

					case 24:
						System.out.println("--- Total de Consultas por M√©dico ---");
						String crmMedicoFn;
						while (true) {
							System.out.print("Digite o CRM do m√©dico: ");
							crmMedicoFn = scanner.nextLine();
							if (crmMedicoFn != null && !crmMedicoFn.trim().isEmpty()) break;
							else System.out.println("‚ùå CRM n√£o pode ser vazio. Tente novamente.");
						}
						int totalConsultas = consultaDAO.totalConsultasPorMedico(crmMedicoFn);
						System.out.println("‚úÖ O m√©dico de CRM " + crmMedicoFn + " realizou " + totalConsultas + " consultas.");
						break;

					case 25:
						System.out.println("--- Relat√≥rio Detalhado de Receita ---");
						int idReceitaRelatorio = 0;
						while (true) {
							try {
								System.out.print("Digite o ID da receita para gerar o relat√≥rio: ");
								idReceitaRelatorio = scanner.nextInt();
								scanner.nextLine();
								break;
							} catch (InputMismatchException e) {
								System.out.println("‚ùå ID inv√°lido. Por favor, insira um n√∫mero inteiro.");
								scanner.nextLine();
							}
						}
						List<String[]> receitas = receitaDAO.buscarReceitaCompletaPorId(idReceitaRelatorio);
						if (receitas == null || receitas.isEmpty()) {
							System.out.println("‚ö†Ô∏è Nenhuma receita encontrada com o ID " + idReceitaRelatorio);
						} else {
							System.out.println("\n--- Relat√≥rio da Receita ---");
							receitas.forEach(r -> {
								System.out.println("ID da Receita: " + r[0]);
								System.out.println("Descri√ß√£o: " + r[1]);
								System.out.println("Data Consulta: " + r[2]);
								System.out.println("Paciente: " + r[3]);
								System.out.println("M√©dico: " + r[4]);
								System.out.println("---------------------------------");
							});
						}
						break;

					case 0:
						System.out.println("Saindo do sistema... At√© mais!");
						break;
						
					default:
						System.out.println("‚ùå Op√ß√£o inv√°lida. Por favor, escolha uma op√ß√£o do menu.");
						break;
					}
				} catch (InputMismatchException e) {
					System.out.println("\n‚ùå Erro de Entrada. Por favor, insira um n√∫mero para escolher uma op√ß√£o do menu.");
					scanner.nextLine(); // Limpa o buffer para evitar loop infinito
					opcao = -1; // Reseta a op√ß√£o
				} catch (Exception e) {
					System.out.println("\n‚ùå Ocorreu um erro inesperado: " + e.getMessage());
					// e.printStackTrace(); // Descomente para depura√ß√£o
					opcao = -1; // Reseta a op√ß√£o
				}

				if (opcao != 0) {
					System.out.println("\nPressione Enter para voltar ao menu...");
					scanner.nextLine();
				}

			} while (opcao != 0);

		} finally {
			if (scanner != null) {
				scanner.close();
				System.out.println("Recursos do sistema liberados.");
			}
		}
	}
}