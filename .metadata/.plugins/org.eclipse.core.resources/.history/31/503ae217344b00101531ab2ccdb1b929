package medPro.main;

import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.List;
import java.util.Scanner;

import medPro.DAO.*;
import medPro.model.*;

public class Main {
	public static void main(String[] args) {

		// --- Inicializa√ß√£o dos DAOs ---
		AtendenteDAO atendenteDAO = new AtendenteDAO();
		MedicoDAO medicoDAO = new MedicoDAO();
		PacienteDAO pacienteDAO = new PacienteDAO();
		MedicamentoDAO medicamentoDAO = new MedicamentoDAO();
		EspecialidadeDAO especialidadeDAO = new EspecialidadeDAO();
		ConsultaDAO consultaDAO = new ConsultaDAO();
		ReceitaDAO receitaDAO = new ReceitaDAO();
		
		// --- Vari√°veis de controle ---
		Scanner scanner = new Scanner(System.in);
		int opcao = -1;

		do {
			// --- Apresenta√ß√£o do Menu ---
			System.out.println("\n===== MENU PRINCIPAL =====");
			System.out.println("--- Atendente ---");
			System.out.println("1. Cadastrar | 2. Visualizar | 3. Atualizar | 4. Excluir");
			
			System.out.println("--- M√©dico ---");
			System.out.println("5. Cadastrar | 6. Visualizar | 7. Atualizar | 8. Excluir");
			
			System.out.println("--- Paciente ---");
			System.out.println("9. Cadastrar | 10. Visualizar | 11. Atualizar | 12. Excluir");
			
			System.out.println("--- Medicamento ---");
			System.out.println("13. Cadastrar | 14. Visualizar | 15. Atualizar | 16. Excluir");
			
			System.out.println("--- Especialidade ---");
			System.out.println("17. Cadastrar | 18. Visualizar | 19. Atualizar | 20. Excluir");
			
			System.out.println("--- Consulta ---");
			System.out.println("21. Agendar | 22. Listar Todas | 23. Finalizar e Gerar Receita | 24. Ver Total por M√©dico");
			
			System.out.println("--- Relat√≥rios ---");
			System.out.println("25. Gerar relat√≥rio de consulta com receita");
			
			System.out.println("0. Sair");
			System.out.print("Escolha uma op√ß√£o: ");

			// --- Tratamento de Erro para entrada de op√ß√£o ---
			try {
				opcao = scanner.nextInt();
			} catch (InputMismatchException e) {
				System.out.println("‚ùå Erro: Por favor, digite um n√∫mero v√°lido para a op√ß√£o.");
				scanner.nextLine(); // Limpa o buffer do scanner para evitar loop infinito
				continue; // Volta para o in√≠cio do loop do-while
			}
			scanner.nextLine(); // Limpa o buffer ap√≥s ler o n√∫mero

			switch (opcao) {
				// ==================================================================
				//  CASES DE ATENDENTE
				// ==================================================================
				case 1:
					try {
						System.out.print("Nome do atendente: ");
						String nome_Atendente = scanner.nextLine();
						System.out.print("Idade do atendente: ");
						int idade_Atendente = scanner.nextInt();
						scanner.nextLine();

						Sexo sexo_Atendente = null;
						do {
							System.out.print("Sexo do atendente (M/F): ");
							String sexoA = scanner.nextLine().toUpperCase();
							if (sexoA.equals("M")) sexo_Atendente = Sexo.M;
							else if (sexoA.equals("F")) sexo_Atendente = Sexo.F;
							else System.out.println("‚ùå Sexo inv√°lido, tente novamente.");
						} while (sexo_Atendente == null);

						System.out.print("Telefone: ");
						String telefone_Atendente = scanner.nextLine();
						System.out.print("Email: ");
						String email_Atendente = scanner.nextLine();

						Atendente atendente = new Atendente(nome_Atendente, idade_Atendente, sexo_Atendente, telefone_Atendente, email_Atendente);
						atendenteDAO.salvar(atendente);
						System.out.println("‚úÖ Atendente cadastrado com sucesso!");
					} catch (InputMismatchException e) {
						System.out.println("‚ùå Erro: A idade deve ser um n√∫mero.");
						scanner.nextLine(); // Limpa o buffer
					}
					break;
				case 2:
					try {
						System.out.print("Digite a matr√≠cula do atendente: ");
						int matriculaSelect = scanner.nextInt();
						Atendente atendenteBuscado = atendenteDAO.buscarPorMatricula(matriculaSelect);
						if (atendenteBuscado != null) {
							System.out.println("üîé Dados do Atendente: " + atendenteBuscado);
						} else {
							System.out.println("‚ö†Ô∏è Atendente n√£o encontrado.");
						}
					} catch (InputMismatchException e) {
						System.out.println("‚ùå Erro: A matr√≠cula deve ser um n√∫mero.");
						scanner.nextLine();
					}
					break;
				case 3:
					try {
						System.out.print("Digite a matr√≠cula do atendente a ser atualizado: ");
						int matriculaUpdate = scanner.nextInt();
						scanner.nextLine();

						Atendente atendenteUpdate = atendenteDAO.buscarPorMatricula(matriculaUpdate);
						if (atendenteUpdate == null) {
							System.out.println("‚ö†Ô∏è Atendente n√£o encontrado.");
							break;
						}

						System.out.print("Novo nome: ");
						atendenteUpdate.setNomeAtendete(scanner.nextLine());
						// Adicionar mais campos para atualizar conforme necess√°rio...

						atendenteDAO.atualizar(atendenteUpdate);
						System.out.println("‚úÖ Dados do atendente atualizados com sucesso!");
					} catch (InputMismatchException e) {
						System.out.println("‚ùå Erro: A matr√≠cula deve ser um n√∫mero.");
						scanner.nextLine();
					}
					break;
				case 4:
					try {
						System.out.print("Digite a matr√≠cula do atendente a ser exclu√≠do: ");
						int matriculaDelete = scanner.nextInt();
						scanner.nextLine();

						Atendente atendenteParaDeletar = atendenteDAO.buscarPorMatricula(matriculaDelete);
						if (atendenteParaDeletar == null) {
							System.out.println("‚ö†Ô∏è Atendente n√£o encontrado.");
							break;
						}

						System.out.println("Voc√™ tem certeza que deseja excluir o atendente: " + atendenteParaDeletar.getNomeAtendente() + "? (S/N)");
						String confirmacao = scanner.nextLine().toUpperCase();

						if (confirmacao.equals("S")) {
							atendenteDAO.deletar(matriculaDelete);
							System.out.println("‚úÖ Atendente exclu√≠do com sucesso.");
						} else {
							System.out.println("Opera√ß√£o cancelada.");
						}
					} catch (InputMismatchException e) {
						System.out.println("‚ùå Erro: A matr√≠cula deve ser um n√∫mero.");
						scanner.nextLine();
					}
					break;
					
				// ==================================================================
				//  CASES DE PACIENTE (Exemplo de refatora√ß√£o)
				// ==================================================================
				case 9:
					try {
						System.out.print("CPF do paciente: ");
						String cpf_Paciente = scanner.nextLine();
						System.out.print("Nome do paciente: ");
						String nome_Paciente = scanner.nextLine();
						System.out.print("Idade do paciente: ");
						int idade_Paciente = scanner.nextInt();
						scanner.nextLine();
						// ... resto do cadastro de paciente ...
						Paciente paciente = new Paciente(cpf_Paciente, nome_Paciente, idade_Paciente, null, null, null); // simplificado
						pacienteDAO.salvar(paciente);
						System.out.println("‚úÖ Paciente cadastrado com sucesso!");
					} catch (InputMismatchException e) {
						System.out.println("‚ùå Erro: A idade deve ser um n√∫mero.");
						scanner.nextLine();
					}
					break;
				case 10:
					System.out.print("Digite o CPF do paciente: ");
					String cpfSelect = scanner.nextLine();
					Paciente pacienteBuscado = pacienteDAO.buscarPorCpf(cpfSelect);
					if (pacienteBuscado != null) {
						System.out.println("üîé Dados do Paciente: " + pacienteBuscado);
					} else {
						System.out.println("‚ö†Ô∏è Paciente n√£o encontrado.");
					}
					break;

				// ==================================================================
				//  CASES DE CONSULTA
				// ==================================================================
				case 21:
					try {
						DateTimeFormatter formatoData = DateTimeFormatter.ofPattern("dd/MM/yyyy");
						LocalDate data = null;
						while (data == null) {
							System.out.print("Data da Consulta (dd/mm/yyyy): ");
							String dataConsultaStr = scanner.nextLine();
							try {
								data = LocalDate.parse(dataConsultaStr, formatoData);
							} catch (DateTimeParseException e) {
								System.out.println("‚ùå Formato de data inv√°lido! Tente novamente.");
							}
						}

						LocalTime hora = null;
						while (hora == null) {
							System.out.print("Hora da Consulta (HH:mm): ");
							String horaConsultaStr = scanner.nextLine();
							try {
								hora = LocalTime.parse(horaConsultaStr);
							} catch (DateTimeParseException e) {
								System.out.println("‚ùå Formato de hora inv√°lido! Tente novamente.");
							}
						}

						System.out.print("Digite o CRM do m√©dico: ");
						String crmMediciConsulta = scanner.nextLine();
						if (medicoDAO.buscarPorCRM(crmMediciConsulta) == null) {
							System.out.println("‚ö†Ô∏è M√©dico n√£o encontrado. Agendamento cancelado.");
							break;
						}

						System.out.print("Digite o CPF do paciente: ");
						String cpfPacienteConsulta = scanner.nextLine();
						if (pacienteDAO.buscarPorCpf(cpfPacienteConsulta) == null) {
							System.out.println("‚ö†Ô∏è Paciente n√£o encontrado. Agendamento cancelado.");
							break;
						}

						Consulta consulta = new Consulta(data.toString(), hora, 0, crmMediciConsulta, cpfPacienteConsulta);
						consultaDAO.inserirConsultaViaProcedure(consulta);
						System.out.println("‚úÖ Consulta agendada com sucesso!");

					} catch (Exception e) {
						System.out.println("‚ùå Ocorreu um erro ao agendar a consulta: " + e.getMessage());
					}
					break;
				case 22:
					System.out.println("üìã Listando todas as consultas...");
					consultaDAO.listarConsultasCompletas();
					break;

				// ==================================================================
				//  OUTROS CASES
				// ==================================================================
				case 0:
					System.out.println("Saindo do sistema... At√© mais!");
					break;
				default:
					if (opcao != -1) { // Evita a mensagem de op√ß√£o inv√°lida na primeira execu√ß√£o com erro
						System.out.println("‚ùå Op√ß√£o inv√°lida. Por favor, tente novamente.");
					}
			}
		} while (opcao != 0);

		scanner.close();
	}
}
