package medPro.main;

import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.List;
import java.util.Scanner;

import medPro.DAO.*;
import medPro.model.*;

public class Main {
	public static void main(String[] args) {

		AtendenteDAO atendenteDAO = new AtendenteDAO();
		Atendente atendente = null;
		MedicoDAO medicoDAO = new MedicoDAO();
		Medico medico = null;
		PacienteDAO pacienteDAO = new PacienteDAO();
		Paciente paciente = null;
		MedicamentoDAO medicamentoDAO = new MedicamentoDAO();
		Medicamento medicamento = null;
		EspecialidadeDAO especialidadeDAO = new EspecialidadeDAO();
		Especialidade especialidade = null;
		ConsultaDAO consultaDAO = new ConsultaDAO();
		Consulta consulta = null;
		ReceitaDAO receitaDAO = new ReceitaDAO();
		Receita receita = null;
		Sexo novoSexo = null;
		Scanner scanner = new Scanner(System.in);
		int opcao = -1;

		try {
			do {
				try {
					System.out.println("\n===== MENU PRINCIPAL =====");
					System.out.println("1. Cadastrar atendente");
					System.out.println("2. Visualizar dados do atendente");
					System.out.println("3. Atualizar dados do atendente");
					System.out.println("4. Excluir atendente");
					System.out.println();
					System.out.println("5. Cadastrar médico");
					System.out.println("6. Visualizar dados do médico");
					System.out.println("7. Atualizar dados do médico");
					System.out.println("8. Excluir médico");
					System.out.println();
					System.out.println("9. Cadastrar paciente");
					System.out.println("10. Visualizar dados do paciente");
					System.out.println("11. Atualizar dados do paciente");
					System.out.println("12. Excluir paciente");
					System.out.println();
					System.out.println("13. Cadastrar medicamento");
					System.out.println("14. Visualizar dados do medicamento");
					System.out.println("15. Atualizar dados do medicamento");
					System.out.println("16. Excluir medicamento");
					System.out.println();
					System.out.println("17. Cadastrar especialidade");
					System.out.println("18. Visualizar todas as especialidades");
					System.out.println("19. Atualizar nome de especialidade");
					System.out.println("20. Excluir especialidade");
					System.out.println();
					System.out.println("21. Agendar consulta");
					System.out.println("22. Listar todas as consultas");
					System.out.println("23. Finalizar consulta e gerar receita");
					System.out.println("24. Ver total de consultas por médico");
					System.out.println("25. Gerar relatório de receita");
					System.out.println("0. Sair");
					System.out.print("Escolha uma opção: ");

					opcao = scanner.nextInt();
					scanner.nextLine(); 

					switch (opcao) {

					case 1:
						System.out.println("--- Cadastro de Atendente ---");
						System.out.print("Nome do atendente: ");
						String nome_Atendente = scanner.nextLine();
						int idade_Atendente = 0;
						while (true) {
							try {
								System.out.print("Idade do atendente: ");
								idade_Atendente = scanner.nextInt();
								scanner.nextLine();
								break;
							} catch (InputMismatchException e) {
								System.out.println(" Idade inválida. Por favor, insira um número.");
								scanner.nextLine();
							}
						}
						Sexo sexo_Atendente = null;
						do {
							System.out.print("Sexo do atendente (M/F): ");
							String sexoA = scanner.nextLine().toUpperCase();
							if (sexoA.equals("M")) sexo_Atendente = Sexo.M;
							else if (sexoA.equals("F")) sexo_Atendente = Sexo.F;
							else System.out.println(" Sexo inválido, tente novamente.");
						} while (sexo_Atendente == null);
						System.out.print("Telefone do atendente: ");
						String telefone_Atendente = scanner.nextLine();
						System.out.print("Email do atendente: ");
						String email_Atendente = scanner.nextLine();
						atendente = new Atendente(nome_Atendente, idade_Atendente, sexo_Atendente, telefone_Atendente, email_Atendente);
						atendenteDAO.salvar(atendente);
						break;

					case 2:
						System.out.println("--- Visualizar Atendente ---");
						System.out.print("Insira a matrícula do atendente: ");
						int matriculaSelect = scanner.nextInt();
						scanner.nextLine();
						System.out.println(atendenteDAO.buscarPorMatricula(matriculaSelect));	
						break;

					case 3:
						System.out.println("--- Atualizar Atendente ---");
						System.out.print("Insira a matrícula do atendente a ser atualizado: ");
						int matriculaUpdate = scanner.nextInt();
						scanner.nextLine();
						Atendente atendenteUpdate = atendenteDAO.buscarPorMatricula(matriculaUpdate);
						if (atendenteUpdate == null) {
							System.out.println(" Atendente não encontrado.");
							break;
						}
						System.out.print("Novo nome (" + atendenteUpdate.getNomeAtendente() + "): ");
						atendenteUpdate.setNomeAtendete(scanner.nextLine());
						System.out.print("Nova idade (" + atendenteUpdate.getIdadeAtendente() + "): ");
						atendenteUpdate.setIdadeAtendente(scanner.nextInt());
						scanner.nextLine();
						do {
							System.out.print("Novo sexo (M/F): ");
							String sexoUpdate = scanner.nextLine().toUpperCase();
							if (sexoUpdate.equals("M")) novoSexo = Sexo.M;
							else if (sexoUpdate.equals("F")) novoSexo = Sexo.F;
							else {
								System.out.println(" Sexo inválido.");
								novoSexo = null;
							}
						} while (novoSexo == null);
						atendenteUpdate.setSexoAtendente(novoSexo);
						System.out.print("Novo telefone (" + atendenteUpdate.getTelefoneAtendente() + "): ");
						atendenteUpdate.setTelefoneAtendente(scanner.nextLine());
						System.out.print("Novo email (" + atendenteUpdate.getEmailAtendente() + "): ");
						atendenteUpdate.setEmailAtendente(scanner.nextLine());
						atendenteDAO.atualizar(atendenteUpdate);
						break;

					case 4:
						System.out.println("--- Excluir Atendente ---");
						System.out.print("Insira a matrícula do atendente a ser excluído: ");
						int matriculaDelete = scanner.nextInt();
						scanner.nextLine();
						atendenteDAO.deletar(matriculaDelete);
						break;

					case 5:
						System.out.println("--- Cadastro de Médico ---");
						System.out.print("CRM do médico: ");
						String CRM_Medico = scanner.nextLine();
						System.out.print("Nome do médico: ");
						String nome_Medico = scanner.nextLine();
						int idade_Medico = 0;
						while(true) {
							try {
								System.out.print("Idade do médico: ");
								idade_Medico = scanner.nextInt();
								scanner.nextLine();
								break;
							} catch (InputMismatchException e) {
								System.out.println("❌ Idade inválida. Por favor, insira um número.");
								scanner.nextLine();
							}
						}
						Sexo sexo_Medico = null;
						do {
							System.out.print("Sexo do médico (M/F): ");
							String sexoM = scanner.nextLine().toUpperCase();
							if (sexoM.equals("M")) sexo_Medico = Sexo.M;
							else if (sexoM.equals("F")) sexo_Medico = Sexo.F;
							else System.out.println("❌ Sexo inválido, tente novamente.");
						} while (sexo_Medico == null);
						System.out.print("Telefone do médico: ");
						String telefone_Medico = scanner.nextLine();
						System.out.print("Email do médico: ");
						String email_Medico = scanner.nextLine();
						List<Especialidade> todasEspecialidades = especialidadeDAO.listarTodos();
						List<Especialidade> especialidadesSelecionadas = new ArrayList<>();
							System.out.println("Selecione as especialidades (digite os números separados por vírgula):");
							for (int i = 0; i < todasEspecialidades.size(); i++) {
								System.out.println((i + 1) + " - " + todasEspecialidades.get(i).getNomeEspecialidade());
							}
							System.out.print("Escolha: ");
							String[] escolhas = scanner.nextLine().split(",");
							for (String escolha : escolhas) {
								try {
									int indice = Integer.parseInt(escolha.trim()) - 1;
									if (indice >= 0 && indice < todasEspecialidades.size()) {
										especialidadesSelecionadas.add(todasEspecialidades.get(indice));
									} else {
										System.out.println(" Número inválido: " + escolha.trim());
									}
								} catch (NumberFormatException e) {
									System.out.println(" Entrada inválida: " + escolha.trim());
								}
							}
						medico = new Medico(CRM_Medico, nome_Medico, idade_Medico, sexo_Medico, telefone_Medico, email_Medico, especialidadesSelecionadas);
						medicoDAO.salvarMedico(medico);
						break;

					case 6:
						System.out.println("--- Visualizar Médico ---");
						System.out.print("Insira o CRM do médico: ");
						String crmSelect = scanner.nextLine();
						System.out.println(medicoDAO.buscarPorCRM(crmSelect));
						break;

					case 7:
						System.out.println("--- Atualizar Médico ---");
						System.out.print("Insira o CRM do médico a ser atualizado: ");
						String crmUpdate = scanner.nextLine();
						Medico medicoUpdate = medicoDAO.buscarPorCRM(crmUpdate);
						if(medicoUpdate == null) {
							System.out.println(" Médico não encontrado.");
							break;
						}
						System.out.print("Novo nome do médico: ");
						medicoUpdate.setNomeMedico(scanner.nextLine());
						medicoDAO.atualizar(medicoUpdate);
						break;

					case 8:
						System.out.println("--- Excluir Médico ---");
						System.out.print("Insira o CRM do médico a ser excluído: ");
						String crmDelete = scanner.nextLine();
						medicoDAO.deletar(crmDelete);
						break;

					case 9:
						System.out.println("--- Cadastro de Paciente ---");
						System.out.print("CPF do paciente: ");
						String cpf_Paciente = scanner.nextLine();
						System.out.print("Nome do paciente: ");
						String nome_Paciente = scanner.nextLine();
						int idade_Paciente = 0;
						while(true){
							try {
								System.out.print("Idade do paciente: ");
								idade_Paciente = scanner.nextInt();
								scanner.nextLine();
								break;
							} catch (InputMismatchException e) {
								System.out.println(" Idade inválida. Por favor, insira um número.");
								scanner.nextLine();
							}
						}
						Sexo sexo_Paciente = null;
						do {
							System.out.print("Sexo do paciente (M/F): ");
							String sexoP = scanner.nextLine().toUpperCase();
							if (sexoP.equals("M")) sexo_Paciente = Sexo.M;
							else if (sexoP.equals("F")) sexo_Paciente = Sexo.F;
							else System.out.println(" Sexo inválido, tente novamente.");
						} while (sexo_Paciente == null);
						System.out.print("Telefone do paciente: ");
						String telefone_Paciente = scanner.nextLine();
						System.out.print("Email do paciente: ");
						String email_Paciente = scanner.nextLine();
						paciente = new Paciente(cpf_Paciente, nome_Paciente, idade_Paciente, sexo_Paciente, telefone_Paciente, email_Paciente);
						pacienteDAO.salvar(paciente);
						break;
						
					case 10:
						System.out.println("--- Visualizar Paciente ---");
						System.out.print("Insira o CPF do paciente: ");
						String cpfSelect = scanner.nextLine();
						System.out.println(pacienteDAO.buscarPorCpf(cpfSelect));
						break;
					
					case 11:
						System.out.println("--- Atualizar Paciente ---");
						System.out.print("Insira o CPF do paciente a ser atualizado: ");
						String cpfUpdate = scanner.nextLine();
						Paciente pacienteUpdate = pacienteDAO.buscarPorCpf(cpfUpdate);
						if(pacienteUpdate == null) {
							System.out.println(" Paciente não encontrado.");
							break;
						}
						System.out.print("Novo nome do paciente: ");
						pacienteUpdate.setNomePaciente(scanner.nextLine());
						pacienteDAO.atualizar(pacienteUpdate);
						break;

					case 12:
						System.out.println("--- Excluir Paciente ---");
						System.out.print("Insira o CPF do paciente a ser excluído: ");
						String cpfDelete = scanner.nextLine();
						pacienteDAO.deletar(cpfDelete);
						break;

					case 13:
						System.out.println("--- Cadastrar Medicamento ---");
						System.out.print("Nome do medicamento: ");
						String nomeMedicamento = scanner.nextLine();
						LocalTime horario_Medicamento = null;
						while(horario_Medicamento == null) {
							try {
								System.out.print("Horário de administração (HH:mm): ");
								horario_Medicamento = LocalTime.parse(scanner.nextLine());
							} catch (DateTimeParseException e) {
								System.out.println(" Formato de hora inválido. Use o formato HH:mm.");
							}
						}
						System.out.print("Quantidade/Dosagem do medicamento: ");
						String quantidade_Medicamento = scanner.nextLine();
						medicamento = new Medicamento(nomeMedicamento, horario_Medicamento, quantidade_Medicamento);
						medicamentoDAO.salvar(medicamento);
						System.out.println(" Medicamento cadastrado com sucesso!");
						break;
					
					case 14:
						System.out.println("--- Visualizar Medicamento ---");
						System.out.print("Insira o ID do medicamento: ");
						int idSelect = scanner.nextInt();
						scanner.nextLine();
						System.out.println(medicamentoDAO.buscarPorId(idSelect));
						break;

					case 15:
						System.out.println("--- Atualizar Medicamento ---");
						System.out.print("Insira o ID do medicamento a ser atualizado: ");
						int idUpdate = scanner.nextInt();
						scanner.nextLine();
						Medicamento medicamentoUpdate = medicamentoDAO.buscarPorId(idUpdate);
						if(medicamentoUpdate == null){
							System.out.println(" Medicamento não encontrado.");
							break;
						}
						System.out.print("Novo nome do medicamento: ");
						medicamentoUpdate.setNomeMedicamento(scanner.nextLine());
						System.out.print("Novo horário (HH:mm): ");
						medicamentoUpdate.setHorario_Medicamento(LocalTime.parse(scanner.nextLine()));
						System.out.print("Nova quantidade/dosagem: ");
						medicamentoUpdate.setQuantidade_Medicamento(scanner.nextLine());
						medicamentoDAO.atualizar(medicamentoUpdate);
						System.out.println(" Medicamento atualizado com sucesso!");
						break;

					case 16:
						System.out.println("--- Excluir Medicamento ---");
						System.out.print("Insira o ID do medicamento a ser excluído: ");
						int idDelete = scanner.nextInt();
						scanner.nextLine();
						medicamentoDAO.deletar(idDelete);
						break;

					case 17:
						System.out.println("--- Cadastrar Especialidade ---");
						System.out.print("Nome da nova especialidade: ");
						String nomeEspecialidade = scanner.nextLine();
						especialidade = new Especialidade(nomeEspecialidade);
						especialidadeDAO.salvar(especialidade);
						System.out.println(" Especialidade cadastrada com sucesso!");
						break;

					case 18:
						System.out.println("--- Lista de Todas as Especialidades ---");
						List<Especialidade> especialidades = especialidadeDAO.listarTodos();
						if (especialidades.isEmpty()) {
							System.out.println(" Nenhuma especialidade encontrada.");
						} else {
							System.out.println(" Especialidades Cadastradas:");
							for (Especialidade esp : especialidades) {
								System.out.println("- " + esp.getNomeEspecialidade());
							}
						}
						break;

					case 19:
						System.out.println("--- Atualizar Especialidade ---");
						System.out.print("Digite o nome da especialidade que deseja atualizar: ");
						String nomeAntigo = scanner.nextLine();
						System.out.print("Digite o novo nome para a especialidade: ");
						String nomeNovo = scanner.nextLine();
						especialidadeDAO.atualizar(nomeAntigo, nomeNovo);
						break;

					case 20:
						System.out.println("--- Excluir Especialidade ---");
						System.out.print("Insira o nome da especialidade que deseja excluir: ");
						String nomeDelete = scanner.nextLine();
						especialidadeDAO.deletar(nomeDelete);
						break;

					case 21:
						System.out.println("--- Agendar Consulta ---");
						DateTimeFormatter formatoData = DateTimeFormatter.ofPattern("dd/MM/yyyy", Locale.forLanguageTag("pt-BR"));
						LocalDate data = null;
						String dataConsultaStr = "";
						while (data == null) {
							System.out.print("Data da Consulta (dd/mm/yyyy): ");
							dataConsultaStr = scanner.nextLine();
							try {
								data = LocalDate.parse(dataConsultaStr, formatoData);
							} catch (DateTimeParseException e) {
								System.out.println(" Formato de data inválido! Use dd/mm/yyyy.");
							}
						}
						LocalTime horaConsulta = null;
						while (horaConsulta == null) {
							System.out.print("Hora da Consulta (HH:mm): ");
							try {
								horaConsulta = LocalTime.parse(scanner.nextLine());
							} catch (DateTimeParseException e) {
								System.out.println(" Formato de hora inválido! Use HH:mm.");
							}
						}
						System.out.println("Escolha o atendente:");
						atendenteDAO.listarTodos();
						System.out.print("Digite a matrícula do atendente: ");
						int idAtendenteConsulta = scanner.nextInt();
						scanner.nextLine();
						System.out.println("Escolha o médico:");
						medicoDAO.listarTodos();
						System.out.print("Digite o CRM do médico: ");
						String crmMedicoConsulta = scanner.nextLine();
						System.out.println("Escolha o paciente:");
						pacienteDAO.listarTodos();
						System.out.print("Digite o CPF do paciente: ");
						String cpfPacienteConsulta = scanner.nextLine();
						consulta = new Consulta(dataConsultaStr, horaConsulta, idAtendenteConsulta, crmMedicoConsulta, cpfPacienteConsulta);
						consultaDAO.inserirConsultaViaProcedure(consulta);
						break;

					case 22:
						System.out.println("--- Lista de Todas as Consultas ---");
						consultaDAO.listarConsultasCompletas();
						break;

					case 23:
						System.out.println("--- Finalizar Consulta e Gerar Receita ---");
						int idConsulta = 0;
						while (true) {
							try {
								System.out.print("Digite o ID da consulta que deseja finalizar: ");
								idConsulta = scanner.nextInt();
								scanner.nextLine();
								break;
							} catch (InputMismatchException e) {
								System.out.println(" ID inválido. Por favor, insira um número inteiro.");
								scanner.nextLine();
							}
						}
						System.out.print("Descrição do tratamento (receita): ");
						String descricaoReceita = scanner.nextLine();
						List<Medicamento> medicamentosDisponiveis = medicamentoDAO.listarTodos();
						List<Medicamento> medicamentosSelecionados = new ArrayList<>();
						if (medicamentosDisponiveis.isEmpty()) {
							System.out.println(" Nenhum medicamento cadastrado no sistema.");
						} else {
							System.out.println(" Lista de Medicamentos disponíveis:");
							medicamentosDisponiveis.forEach(m -> System.out.println(m.getIdMedicamento() + " - " + m.getNomeMedicamento()));
							String continuar;
							do {
								int idMedicamento = 0;
								while (true) {
									try {
										System.out.print("Digite o ID do medicamento para adicionar à receita: ");
										idMedicamento = scanner.nextInt();
										scanner.nextLine();
										break;
									} catch (InputMismatchException e) {
										System.out.println(" ID inválido. Por favor, insira um número inteiro.");
										scanner.nextLine();
									}
								}
								Medicamento m = medicamentoDAO.buscarPorId(idMedicamento);
								if (m != null) {
									medicamentosSelecionados.add(m);
									System.out.println(" Medicamento adicionado.");
								} else {
									System.out.println(" Medicamento não encontrado.");
								}
								while (true) {
									System.out.print("Deseja adicionar outro medicamento? (S/N): ");
									continuar = scanner.nextLine().toUpperCase();
									if (continuar.equals("S") || continuar.equals("N")) break;
									else System.out.println(" Opção inválida. Digite 'S' para Sim ou 'N' para Não.");
								}
							} while (continuar.equals("S"));
						}
						receita = new Receita(0, descricaoReceita, medicamentosSelecionados, idConsulta);
						receitaDAO.salvar(receita);
						System.out.println(" Receita salva com sucesso!");
						break;

					case 24:
						System.out.println("--- Total de Consultas por Médico ---");
						String crmMedicoFn;
						while (true) {
							System.out.print("Digite o CRM do médico: ");
							crmMedicoFn = scanner.nextLine();
							if (crmMedicoFn != null && !crmMedicoFn.trim().isEmpty()) break;
							else System.out.println(" CRM não pode ser vazio. Tente novamente.");
						}
						int totalConsultas = consultaDAO.totalConsultasPorMedico(crmMedicoFn);
						System.out.println(" O médico de CRM " + crmMedicoFn + " realizou " + totalConsultas + " consultas.");
						break;

					case 25:
						System.out.println("--- Relatório Detalhado de Receita ---");
						int idReceitaRelatorio = 0;
						while (true) {
							try {
								System.out.print("Digite o ID da receita para gerar o relatório: ");
								idReceitaRelatorio = scanner.nextInt();
								scanner.nextLine();
								break;
							} catch (InputMismatchException e) {
								System.out.println(" ID inválido. Por favor, insira um número inteiro.");
								scanner.nextLine();
							}
						}
						List<String[]> receitas = receitaDAO.buscarReceitaCompletaPorId(idReceitaRelatorio);
						if (receitas == null || receitas.isEmpty()) {
							System.out.println(" Nenhuma receita encontrada com o ID " + idReceitaRelatorio);
						} else {
							System.out.println("\n--- Relatório da Receita ---");
							receitas.forEach(r -> {
								System.out.println("ID da Receita: " + r[0]);
								System.out.println("Descrição: " + r[1]);
								System.out.println("Data Consulta: " + r[2]);
								System.out.println("Paciente: " + r[3]);
								System.out.println("Médico: " + r[4]);
								System.out.println("---------------------------------");
							});
						}
						break;

					case 0:
						System.out.println("Saindo do sistema... Até mais!");
						break;

					default:
						System.out.println(" Opção inválida. Por favor, escolha uma opção do menu.");
						break;
					}
				} catch (InputMismatchException e) {
					System.out.println("\n Erro de Entrada. Por favor, insira um número para escolher uma opção do menu.");
					scanner.nextLine();
					opcao = -1; 
				} catch (Exception e) {
					System.out.println("\n Ocorreu um erro inesperado: " + e.getMessage());
					e.printStackTrace(); 
					opcao = -1; 
				}

				if (opcao != 0) {
					System.out.println("\nPressione Enter para voltar ao menu...");
					scanner.nextLine();
				}

			} while (opcao != 0);

		} finally {
			if (scanner != null) {
				scanner.close();
				System.out.println("Recursos do sistema liberados.");
			}
		}
	}
}